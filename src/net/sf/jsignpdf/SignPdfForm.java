package net.sf.jsignpdf;

import java.awt.Toolkit;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URL;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;

/**
 * GUI for PDFSigner.
 * @author  Josef Cacek
 */
public class SignPdfForm extends javax.swing.JFrame implements SignResultListener {

	private static final long serialVersionUID = 1L;

	private JFileChooser fc = new SignerFileChooser();

	protected final PropertyProvider props = PropertyProvider.getInstance();
	protected final ResourceProvider res = ResourceProvider.getInstance();

	private PrintWriter infoWriter;
	private TextAreaStream infoStream;

	/** Creates new form SignPdfForm */
	public SignPdfForm(int aCloseOperation) {
		initComponents();
		loadProperties();
		translateLabels();

		setDefaultCloseOperation(aCloseOperation);

		infoStream = new TextAreaStream(infoTextArea);
		infoWriter = new PrintWriter(infoStream, true);

		//set Icon of frames
		URL tmpImgUrl = getClass().getClassLoader().getResource("signedpdf32.png");
		setIconImage(Toolkit.getDefaultToolkit().getImage(tmpImgUrl));
		infoDialog.setIconImage(getIconImage());

		infoDialog.pack();
	}

	/**
	 * Application translations.
	 */
	private void translateLabels() {
		setTitle(res.get("gui.title", new String[] {Constants.VERSION}));
		lblKeystoreType.setText(res.get("gui.keystoreType.label"));
		lblKeystoreFile.setText(res.get("gui.keystoreFile.label"));
		lblPassword.setText(res.get("gui.keystorePassword.label"));
		lblInPdfFile.setText(res.get("gui.inPdfFile.label"));
		lblOutPdfFile.setText(res.get("gui.outPdfFile.label"));
		lblReason.setText(res.get("gui.reason.label"));
		lblLocation.setText(res.get("gui.location.label"));

		btnKeystoreFile.setText(res.get("gui.browse.button"));
		btnInPdfFile.setText(res.get("gui.browse.button"));
		btnOutPdfFile.setText(res.get("gui.browse.button"));

		btnSignIt.setText(res.get("gui.signIt.button"));

		infoDialog.setTitle(res.get("gui.info.title"));
		btnInfoClose.setText(res.get("gui.info.close.button"));
	}

	/**
	 * Loads properties saved by previous run of application
	 */
	private void loadProperties() {
		cbKeystoreType.setSelectedIndex(props.getAsInt(Constants.PROPERTY_KSTYPE));
		tfKeystoreFile.setText(props.getProperty(Constants.PROPERTY_KEYSTORE));
		tfInPdfFile.setText(props.getProperty(Constants.PROPERTY_INPDF));
		tfOutPdfFile.setText(props.getProperty(Constants.PROPERTY_OUTPDF));
		tfReason.setText(props.getProperty(Constants.PROPERTY_REASON));
		tfLocation.setText(props.getProperty(Constants.PROPERTY_LOCATION));
	}

	/**
	 * Displays file chooser dialog of given type and with givet FileFilter.
	 * @param aFileField assigned textfield
	 * @param aFilter filefilter
	 * @param aType dialog type (SAVE_DIALOG, OPEN_DIALOG)
	 */
	void showFileChooser(final JTextField aFileField, final FileFilter aFilter, final int aType) {
		fc.setDialogType(aType);
		fc.resetChoosableFileFilters();
		fc.setFileFilter(aFilter);
		String tmpFileName = aFileField.getText();
		if (tmpFileName==null || tmpFileName.length()==0) {
			fc.setSelectedFile(null);
		} else {
			File tmpFile = new File(tmpFileName);
			fc.setSelectedFile(tmpFile);
		}
		if (JFileChooser.APPROVE_OPTION == fc.showDialog(this, null)) {
			aFileField.setText(fc.getSelectedFile().getAbsolutePath());
		}
	}


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        infoDialog = new javax.swing.JFrame();
        infoScrollPane = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        btnInfoClose = new javax.swing.JButton();
        lblKeystoreType = new javax.swing.JLabel();
        cbKeystoreType = new javax.swing.JComboBox();
        lblKeystoreFile = new javax.swing.JLabel();
        tfKeystoreFile = new javax.swing.JTextField();
        btnKeystoreFile = new javax.swing.JButton();
        lblPassword = new javax.swing.JLabel();
        pfPassword = new javax.swing.JPasswordField();
        lblInPdfFile = new javax.swing.JLabel();
        tfInPdfFile = new javax.swing.JTextField();
        btnInPdfFile = new javax.swing.JButton();
        lblOutPdfFile = new javax.swing.JLabel();
        tfOutPdfFile = new javax.swing.JTextField();
        btnOutPdfFile = new javax.swing.JButton();
        lblReason = new javax.swing.JLabel();
        tfReason = new javax.swing.JTextField();
        lblLocation = new javax.swing.JLabel();
        tfLocation = new javax.swing.JTextField();
        btnSignIt = new javax.swing.JButton();

        infoDialog.setTitle("PDF Signer Output");
        infoDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                infoDialogWindowClosing(evt);
            }
        });

        infoTextArea.setColumns(80);
        infoTextArea.setEditable(false);
        infoTextArea.setFont(new java.awt.Font("Courier New", 1, 10));
        infoTextArea.setRows(25);
        infoTextArea.setMinimumSize(new java.awt.Dimension(200, 180));
        infoScrollPane.setViewportView(infoTextArea);

        infoDialog.getContentPane().add(infoScrollPane, java.awt.BorderLayout.CENTER);

        btnInfoClose.setText("Close");
        btnInfoClose.setMinimumSize(new java.awt.Dimension(50, 20));
        btnInfoClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoCloseActionPerformed(evt);
            }
        });

        infoDialog.getContentPane().add(btnInfoClose, java.awt.BorderLayout.SOUTH);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("SignPdf");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblKeystoreType.setLabelFor(cbKeystoreType);
        lblKeystoreType.setText("Keystore type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        getContentPane().add(lblKeystoreType, gridBagConstraints);

        cbKeystoreType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PKCS#12", "JKS" }));
        cbKeystoreType.setMinimumSize(new java.awt.Dimension(150, 20));
        cbKeystoreType.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(cbKeystoreType, gridBagConstraints);

        lblKeystoreFile.setLabelFor(tfKeystoreFile);
        lblKeystoreFile.setText("Keystore file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        getContentPane().add(lblKeystoreFile, gridBagConstraints);

        tfKeystoreFile.setMinimumSize(new java.awt.Dimension(250, 20));
        tfKeystoreFile.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 4.0;
        getContentPane().add(tfKeystoreFile, gridBagConstraints);

        btnKeystoreFile.setText("Browse...");
        btnKeystoreFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeystoreFileActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 1, 5);
        getContentPane().add(btnKeystoreFile, gridBagConstraints);

        lblPassword.setLabelFor(pfPassword);
        lblPassword.setText("Keystore password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        getContentPane().add(lblPassword, gridBagConstraints);

        pfPassword.setMinimumSize(new java.awt.Dimension(150, 20));
        pfPassword.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(pfPassword, gridBagConstraints);

        lblInPdfFile.setLabelFor(tfInPdfFile);
        lblInPdfFile.setText("Input PDF file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        getContentPane().add(lblInPdfFile, gridBagConstraints);

        tfInPdfFile.setMinimumSize(new java.awt.Dimension(150, 20));
        tfInPdfFile.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(tfInPdfFile, gridBagConstraints);

        btnInPdfFile.setText("Browse...");
        btnInPdfFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInPdfFileActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 1, 5);
        getContentPane().add(btnInPdfFile, gridBagConstraints);

        lblOutPdfFile.setLabelFor(tfOutPdfFile);
        lblOutPdfFile.setText("Output PDF file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        getContentPane().add(lblOutPdfFile, gridBagConstraints);

        tfOutPdfFile.setMinimumSize(new java.awt.Dimension(150, 20));
        tfOutPdfFile.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(tfOutPdfFile, gridBagConstraints);

        btnOutPdfFile.setText("Browse...");
        btnOutPdfFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutPdfFileActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 1, 5);
        getContentPane().add(btnOutPdfFile, gridBagConstraints);

        lblReason.setLabelFor(tfReason);
        lblReason.setText("Reason");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        getContentPane().add(lblReason, gridBagConstraints);

        tfReason.setMinimumSize(new java.awt.Dimension(150, 20));
        tfReason.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(tfReason, gridBagConstraints);

        lblLocation.setLabelFor(tfLocation);
        lblLocation.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        getContentPane().add(lblLocation, gridBagConstraints);

        tfLocation.setMinimumSize(new java.awt.Dimension(150, 20));
        tfLocation.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(tfLocation, gridBagConstraints);

        btnSignIt.setFont(new java.awt.Font("Tahoma", 1, 12));
        btnSignIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/signedpdf26.png")));
        btnSignIt.setText("Sign It");
        btnSignIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignItActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnSignIt, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void infoDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_infoDialogWindowClosing
		if (btnInfoClose.isEnabled()) {
			setVisible(true);
		}
	}//GEN-LAST:event_infoDialogWindowClosing


	/**
	 * @see net.sf.jsignpdf.SignResultListener#signerFinishedEvent(boolean)
	 */
	public synchronized void signerFinishedEvent(boolean success) {
		btnInfoClose.setEnabled(true);
		infoDialog.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
	}


	private void btnInfoCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoCloseActionPerformed
		infoDialog.setVisible(false);
		setVisible(true);
	}//GEN-LAST:event_btnInfoCloseActionPerformed

	/**
	 * Checks if file exists and it's possible write to it.
	 * @param aTF text field with file name filled
	 * @param aFileDescKey file description (used in error message)
	 * @return result of the check
	 */
	private boolean checkFileExists(JTextField aTF, String aFileDescKey) {
		final String tmpFileName = aTF.getText();
		try {
			if (tmpFileName!=null) {
				File tmpFile = new File(tmpFileName);
				if (tmpFile.canRead() && !tmpFile.isDirectory()) {
					return true;
				}
			}
		} catch (Exception e) {}

		final String tmpMsg = res.get("gui.fileNotExists.error",
				new String[] {res.get(aFileDescKey)});
		JOptionPane.showMessageDialog(this, tmpMsg, res.get("gui.check.error.title"), JOptionPane.ERROR_MESSAGE);
		return false;
	}

	/**
	 * Checks if is textfield filled
	 * @param aTF text field to check
	 * @param aDescKey text field description
	 * @return result of the check
	 */
	private boolean checkFilled(JTextField aTF, String aDescKey) {
		final String tmpFileName = aTF.getText();
		if (tmpFileName!=null && tmpFileName.length()>0) {
			return true;
		}
		final String tmpMsg = res.get("gui.valueNotFilled.error",
				new String[] {res.get(aDescKey)});
		JOptionPane.showMessageDialog(this,tmpMsg, res.get("gui.check.error.title"), JOptionPane.ERROR_MESSAGE);
		return false;
	}

	/**
	 * Checks if inFile and outFile are different.
	 * @return result of the check
	 */
	private boolean checkInOutDiffers() {
		final String tmpInName = tfInPdfFile.getText();
		final String tmpOutName = tfOutPdfFile.getText();
		boolean tmpResult = true;
		if (tmpInName!=null && tmpOutName!=null) {
			try {
				final File tmpInFile = (new File(tmpInName)).getAbsoluteFile();
				final File tmpOutFile = (new File(tmpOutName)).getAbsoluteFile();
				if (tmpInFile.equals(tmpOutFile)) {
					tmpResult = false;
					JOptionPane.showMessageDialog(this,
							res.get("gui.filesEqual.error"),
							res.get("gui.check.error.title"),
							JOptionPane.ERROR_MESSAGE);
				}
			} catch (Exception e) {
				tmpResult = false;
				JOptionPane.showMessageDialog(this,e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
			}
		}
		return tmpResult;
	}

	private void btnSignItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignItActionPerformed
		if (checkFileExists(tfInPdfFile, "gui.inPdfFile.label")
				&& checkFileExists(tfKeystoreFile, "gui.keystoreFile.label")
				&& checkFilled(tfOutPdfFile, "gui.outPdfFile.label")
				&& checkInOutDiffers()) {
			infoStream.clear();
			btnInfoClose.setEnabled(false);
			infoDialog.setVisible(true);
			setVisible(false);
			infoDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
			infoWriter.println(res.get("console.starting"));
			final SignerThread tmpST = new SignerThread(
					infoWriter,
					cbKeystoreType.getSelectedIndex()==0?Constants.KS_TYPE_PKCS12:Constants.KS_TYPE_JKS,
							tfKeystoreFile.getText(),
							pfPassword.getPassword(),
							tfInPdfFile.getText(),
							tfOutPdfFile.getText(),
							tfReason.getText(),
							tfLocation.getText());
			tmpST.setListener(this);
			tmpST.start();
		}
	}//GEN-LAST:event_btnSignItActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		props.setProperty(Constants.PROPERTY_KSTYPE, String.valueOf(cbKeystoreType.getSelectedIndex()));
		props.setProperty(Constants.PROPERTY_KEYSTORE, tfKeystoreFile.getText());
		props.setProperty(Constants.PROPERTY_INPDF, tfInPdfFile.getText());
		props.setProperty(Constants.PROPERTY_OUTPDF, tfOutPdfFile.getText());
		props.setProperty(Constants.PROPERTY_REASON, tfReason.getText());
		props.setProperty(Constants.PROPERTY_LOCATION, tfLocation.getText());
		props.saveDefault();
	}//GEN-LAST:event_formWindowClosing

	private void btnOutPdfFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutPdfFileActionPerformed
		showFileChooser(tfOutPdfFile, SignerFileChooser.FILEFILTER_PDF, JFileChooser.SAVE_DIALOG);

	}//GEN-LAST:event_btnOutPdfFileActionPerformed

	private void btnInPdfFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInPdfFileActionPerformed
		showFileChooser(tfInPdfFile, SignerFileChooser.FILEFILTER_PDF, JFileChooser.OPEN_DIALOG);
	}//GEN-LAST:event_btnInPdfFileActionPerformed

	private void btnKeystoreFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeystoreFileActionPerformed
		final FileFilter tmpFilter = cbKeystoreType.getSelectedIndex()==0
		?SignerFileChooser.FILEFILTER_PKCS12
				:SignerFileChooser.FILEFILTER_JKS;
		showFileChooser(tfKeystoreFile, tmpFilter, JFileChooser.OPEN_DIALOG);
	}//GEN-LAST:event_btnKeystoreFileActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInPdfFile;
    private javax.swing.JButton btnInfoClose;
    private javax.swing.JButton btnKeystoreFile;
    private javax.swing.JButton btnOutPdfFile;
    private javax.swing.JButton btnSignIt;
    private javax.swing.JComboBox cbKeystoreType;
    private javax.swing.JFrame infoDialog;
    private javax.swing.JScrollPane infoScrollPane;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JLabel lblInPdfFile;
    private javax.swing.JLabel lblKeystoreFile;
    private javax.swing.JLabel lblKeystoreType;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblOutPdfFile;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblReason;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JTextField tfInPdfFile;
    private javax.swing.JTextField tfKeystoreFile;
    private javax.swing.JTextField tfLocation;
    private javax.swing.JTextField tfOutPdfFile;
    private javax.swing.JTextField tfReason;
    // End of variables declaration//GEN-END:variables


}

/**
 * OutputStream wrapper for writing to TextArea component
 * @author Josef Cacek
 */
class TextAreaStream extends OutputStream {
	protected final JTextArea textArea;
	protected final ByteArrayOutputStream baos;

	public TextAreaStream(JTextArea textArea) {
		this.textArea = textArea;
		this.baos = new ByteArrayOutputStream();
	}

	public void write(int c) {
		synchronized (this) {
			this.baos.write((char) c);
			this.update();
		}
	}

	public void write(byte[] bytes, int offset, int length) {
		synchronized (this) {
			this.baos.write(bytes, offset, length);
			this.update();
		}
	}

	private void update() {
		String text = new String(this.baos.toByteArray());
		this.textArea.setText(text);
		this.textArea.setCaretPosition(text.length());
	}

	public void clear() {
		synchronized (this) {
			baos.reset();
			update();
		}
	}
}
